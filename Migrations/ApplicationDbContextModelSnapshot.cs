// <auto-generated />
using AspTodo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace AspTodo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("AspTodo.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AspTodo.Models.Invitation", b =>
                {
                    b.Property<string>("SenderID");

                    b.Property<string>("ReceiverID");

                    b.Property<string>("ListID");

                    b.HasKey("SenderID", "ReceiverID", "ListID");

                    b.HasIndex("ListID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("AspTodo.Models.Sharing", b =>
                {
                    b.Property<string>("ListID");

                    b.Property<string>("ShareeID");

                    b.HasKey("ListID", "ShareeID");

                    b.HasIndex("ShareeID");

                    b.ToTable("Sharings");
                });

            modelBuilder.Entity("AspTodo.Models.TodoItem", b =>
                {
                    b.Property<string>("ItemID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Completed");

                    b.Property<DateTime?>("DueDate");

                    b.Property<string>("ItemName")
                        .IsRequired();

                    b.Property<int>("ItemOrder");

                    b.Property<string>("ListID");

                    b.Property<string>("Notes");

                    b.HasKey("ItemID");

                    b.HasIndex("ListID", "ItemOrder")
                        .IsUnique();

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("AspTodo.Models.TodoList", b =>
                {
                    b.Property<string>("ListID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ListName")
                        .IsRequired();

                    b.Property<string>("OwnerID");

                    b.HasKey("ListID");

                    b.HasIndex("OwnerID");

                    b.ToTable("TodoLists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AspTodo.Models.Invitation", b =>
                {
                    b.HasOne("AspTodo.Models.TodoList", "TodoList")
                        .WithMany("Invitations")
                        .HasForeignKey("ListID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspTodo.Models.ApplicationUser", "Receiver")
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspTodo.Models.ApplicationUser", "Sender")
                        .WithMany("SentInvitations")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspTodo.Models.Sharing", b =>
                {
                    b.HasOne("AspTodo.Models.TodoList", "TodoList")
                        .WithMany("Sharings")
                        .HasForeignKey("ListID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspTodo.Models.ApplicationUser", "Sharee")
                        .WithMany("Sharings")
                        .HasForeignKey("ShareeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspTodo.Models.TodoItem", b =>
                {
                    b.HasOne("AspTodo.Models.TodoList", "TodoList")
                        .WithMany("TodoItems")
                        .HasForeignKey("ListID");
                });

            modelBuilder.Entity("AspTodo.Models.TodoList", b =>
                {
                    b.HasOne("AspTodo.Models.ApplicationUser", "Owner")
                        .WithMany("OwnedLists")
                        .HasForeignKey("OwnerID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AspTodo.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AspTodo.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspTodo.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AspTodo.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
